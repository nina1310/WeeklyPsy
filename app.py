from flask import Flask, render_template, request, redirect, url_for
import json, os, hashlib, random
from datetime import datetime

app = Flask(__name__)
USER_FILE = 'users.json'

def load_users():
    if os.path.exists(USER_FILE):
        with open(USER_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USER_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=2, ensure_ascii=False)

@app.route('/')
def home():
    return redirect(url_for('accueil'))

@app.route('/accueil')
def accueil():
    return render_template("accueil.html")


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        pseudo = request.form['username']
        password = request.form['password']
        users = load_users()

        if pseudo in users:
            hashed = hashlib.sha256(password.encode()).hexdigest()
            if users[pseudo]["password"] == hashed:
                return redirect(url_for('dashboard', pseudo=pseudo))
            else:
                return render_template("connexion.html", error="Mot de passe incorrect.")
        else:
            return render_template("connexion.html", error="Ce pseudo n'existe pas.")

    return render_template("connexion.html")


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        print("Formulaire re√ßu :", request.form)
        pseudo = request.form.get('username')
        password = request.form.get('password')

        if not pseudo or not password:
            return render_template("creer_compte.html", error="Tous les champs sont requis.")

        users = load_users()

        if pseudo in users:
            return render_template("creer_compte.html", error="Pseudo d√©j√† utilis√©.")

        hashed = hashlib.sha256(password.encode()).hexdigest()
        users[pseudo] = {"password": hashed, "reponses": []}
        save_users(users)
        print("‚úÖ Compte cr√©√© pour :", pseudo)
        return redirect(url_for('login'))

    return render_template("creer_compte.html")


@app.route('/dashboard/<pseudo>')
def dashboard(pseudo):
    users = load_users()
    if pseudo in users:
        return render_template("dashboard.html", pseudo=pseudo, reponses=users[pseudo].get('reponses', []))
    return redirect(url_for('login'))

@app.route('/suivi/<pseudo>', methods=['GET', 'POST'])
def suivi(pseudo):
    users = load_users()
    if pseudo not in users:
        return redirect(url_for('login'))

    today = datetime.now().strftime("%Y-%m-%d")

    # V√©rifie si un suivi a √©t√© fait aujourd'hui
    for rep in users[pseudo]["reponses"]:
        if rep["date"] == today:
            if "motivation" in rep and "avancement" in rep:
                # Suivi √©motionnel + √©tudes d√©j√† remplis
                return render_template("dashboard.html", pseudo=pseudo, reponses=users[pseudo]["reponses"], message="Tu as d√©j√† rempli ton suivi aujourd‚Äôhui üòâ")
            else:
                # Suivi √©motionnel fait mais pas les √©tudes
                return redirect(url_for('suivi_etudes', pseudo=pseudo))

    # Reset apr√®s 7 jours
    if len(users[pseudo]["reponses"]) >= 7:
        users[pseudo]["reponses"] = []
        users[pseudo]["questions_pos√©es"] = []

    # Tirage d'une question sp√©ciale non r√©p√©t√©e
    all_questions = [
        "As-tu ressenti de la solitude aujourd‚Äôhui ?",
        "As-tu re√ßu du soutien aujourd‚Äôhui ?",
        "As-tu ri aujourd‚Äôhui ?",
        "As-tu √©t√© fier(e) de toi aujourd‚Äôhui ?",
        "As-tu partag√© un moment agr√©able ?",
        "As-tu ressenti de la motivation ?",
        "As-tu ressenti de la fatigue √©motionnelle ?"
    ]
    deja_posees = users[pseudo].get("questions_pos√©es", [])
    restantes = [q for q in all_questions if q not in deja_posees]

    if not restantes:
        restantes = all_questions
        deja_posees = []
    
    question_du_jour = random.choice(restantes)



    if request.method == 'POST':
        emotions = request.form.getlist('emotions')
        triste = request.form.get('triste')
        colere = request.form.get('colere')
        stress = int(request.form.get('stress', 5))
        etudes = int(request.form.get('etudes', 5))
        extra = request.form.get('extra', 'non')

        reponse_du_jour = {
            "date": today,
            "emotions": emotions,
            "triste": triste,
            "colere": colere,
            "stress": stress,
            "etudes": etudes,
            "question_speciale": question_du_jour,
            "reponse_speciale": extra
        }

        users[pseudo]["reponses"].append(reponse_du_jour)
        deja_posees.append(question_du_jour)
        users[pseudo]["questions_pos√©es"] = deja_posees
        save_users(users)
        return redirect(url_for('suivi_etudes', pseudo=pseudo))

    return render_template("suivi.html", pseudo=pseudo, question_speciale=question_du_jour)



@app.route('/suivi_etudes/<pseudo>', methods=['GET', 'POST'])
def suivi_etudes(pseudo):
    users = load_users()
    if pseudo not in users:
        return redirect(url_for('login'))

    if request.method == 'POST':
        if not users[pseudo]["reponses"]:
            return redirect(url_for('dashboard', pseudo=pseudo))

        reponse_du_jour = users[pseudo]["reponses"][-1]

        reponse_du_jour["concentration"] = int(request.form.get('concentration', 5))
        reponse_du_jour["motivation"] = int(request.form.get('motivation', 5))
        reponse_du_jour["avancement"] = request.form.get('avancement')
        reponse_du_jour["envie_arret"] = request.form.get('envie_arret')
        reponse_du_jour["retard"] = request.form.get('retard')
        reponse_du_jour["incomprehension"] = request.form.get('incomprehension')

        save_users(users)
        return redirect(url_for('dashboard', pseudo=pseudo))

    return render_template("suivi_etudes.html", pseudo=pseudo)

@app.route('/bilan/<pseudo>')
def bilan(pseudo):
    users = load_users()
    if pseudo not in users:
        return redirect(url_for('login'))

    reponses = users[pseudo].get("reponses", [])
    nb_reponses = len(reponses)

    if nb_reponses == 0:
        return f"Aucune r√©ponse enregistr√©e pour {pseudo}"

    compteur = {
        "triste": 0, "colere": 0, "stress": [], "etudes": [],
        "joie": 0, "gratitude": 0, "jalousie": 0, "fiert√©": 0,
        "anxi√©t√©": 0, "culpabilit√©": 0
    }

    for rep in reponses:
        emotions = rep.get("emotions", [])
        for e in emotions:
            if e in compteur:
                compteur[e] += 1

        if rep.get("colere") == "oui":
            compteur["colere"] += 2
        elif rep.get("colere") == "un peu":
            compteur["colere"] += 1

        compteur["stress"].append(rep.get("stress", 5))
        compteur["etudes"].append(rep.get("etudes", 5))

    resume = []

    if nb_reponses < 7:
        resume.append(f"Voici un petit retour sur ta journ√©e :")

        if compteur["triste"] >= 2:
            resume.append("Tu as √©t√© triste, n'oublie pas qu'apr√®s la pluie vient l'arc-en-ciel :) Tu peux lire un livre ou regarder une s√©rie ce soir pour te changer les id√©es.")
        if compteur["colere"] >= 2:
            resume.append("Ta col√®re a s√ªrement √©t√© l√©gitime. Essaie de penser √† autre chose et balaye cette histoire du revers de la main, tu m√©rites d'√™tre en paix.")
        if compteur["stress"] and sum(compteur["stress"]) / len(compteur["stress"]) > 6:
            resume.append("Tu es stress√©(e), n'oublie pas de prendre un moment de m√©ditation avant de dormir. (PS : √ßa n'en vaut pas la peine) ")
        if compteur["etudes"] and sum(compteur["etudes"]) / len(compteur["etudes"]) < 5:
            resume.append("Les cours ont √©t√© difficiles aujourd'hui... Prends le temps qu'il faut pour reprendre chaque notion et n'h√©site pas √† demander de l'aide pour que √ßa aille mieux demain ;)")
        if compteur["culpabilit√©"] >= 2:
            resume.append("La culpabilit√© s‚Äôest montr√©e souvent. Tu fais de ton mieux, c‚Äôest ce qui compte.")
        if compteur["joie"] >= 2:
            resume.append("Tu es joyeux(se) en ce moment ! Garde ce beau sourire.")

        if not any(r.startswith("Tu ") for r in resume):
            resume.append("Pour l‚Äôinstant, cette semaine se montre plut√¥t agr√©able ! Je suis fi√®re de toi.")

    else:
        resume.append("Bravo ! Tu as compl√©t√© une semaine enti√®re de suivi üèÅ")
        resume.append("Voici ton bilan complet. Prends un moment pour le lire attentivement, tu le m√©rites.")

        if compteur["triste"] >= 4:
            resume.append("Tu as sembl√© traverser une p√©riode de tristesse. Si un √©v√©nement t‚Äôa touch√©(e), c‚Äôest normal de te sentir comme √ßa. Autorise-toi √† pleurer, cela fait du bien. Mais si ce chagrin prend trop de place dans ta vie, n'h√©site pas √† en parler √† quelqu‚Äôun. La psychologue de l‚ÄôUniversit√© re√ßoit avec ou sans rendez-vous, tu trouveras ses horaires sur l‚ÄôInstagram de l‚ÄôUniversit√©. Tu peux aussi essayer le journaling, cela peut vraiment aider √† poser ses √©motions. Courage, tout va finir par s‚Äô√©claircir üåà")

        if compteur["colere"] >= 4:
            resume.append("Tu as √©t√© particuli√®rement en col√®re. Si cela est d√ª √† certains conflits √† l‚ÄôUniversit√©, tu peux te tourner vers Monsieur Delbot, le m√©diateur. Il est l√† pour aider, et il est vraiment bienveillant. Sinon, certaines activit√©s physiques comme la boxe ou la course peuvent aider √† canaliser cette √©nergie.")

        if sum(compteur["stress"]) / len(compteur["stress"]) > 6:
            resume.append("Tu as √©t√© tr√®s stress√©(e) ces derniers jours. C‚Äôest compr√©hensible quand on jongle avec plein de responsabilit√©s. Mais rappelle-toi : rien ne vaut ta tranquillit√© d‚Äôesprit. Tu pourrais essayer de prendre 10 minutes pour respirer, m√©diter, ou faire un peu de yoga avant de dormir. Ton corps et ton esprit ont besoin de repos aussi üíÜ‚Äç‚ôÄÔ∏è")

        if sum(compteur["etudes"]) / len(compteur["etudes"]) < 5:
            resume.append("Tu n‚Äôes pas vraiment √©panoui(e) dans tes √©tudes. C‚Äôest peut-√™tre juste une p√©riode, ou peut-√™tre que tu te poses des questions plus profondes. Il existe de nombreux parcours diff√©rents, et tu pourrais tr√®s bien trouver celui qui te correspond. Le Service d‚Äôaccompagnement √† l‚Äôorientation (SUIO), au b√¢timent Ramnoux, peut t‚Äôaider √† y voir plus clair.")

        if compteur["joie"] >= 3:
            resume.append("Tu as ressenti beaucoup de joie cette semaine. Prends un instant pour te souvenir de ce qui t‚Äôa rendu heureux(se) ;)")

        if compteur["gratitude"] >= 3:
            resume.append("Tu as souvent ressenti de la gratitude. C‚Äôest une qualit√© pr√©cieuse : elle nourrit ton bien-√™tre et renforce tes liens aux autres.")

        if compteur["jalousie"] >= 3:
            resume.append("Tu as ressenti de la jalousie √† plusieurs reprises. Essaie d‚Äôen faire un signal : de quoi aurais-tu envie ou besoin toi aussi ? √âcoute-toi, sans jugement. N'oublie pas que tu poss√®des en toi beaucoup de qualit√©s uniques.")

        if compteur["fiert√©"] >= 3:
            resume.append("Tu t‚Äôes senti(e) fier(e) de toi cette semaine. C‚Äôest super important ! Note ce que tu as accompli pour t‚Äôen souvenir plus tard.")

        if compteur["anxi√©t√©"] >= 3:
            resume.append("L‚Äôanxi√©t√© semble avoir √©t√© bien pr√©sente. Tu n‚Äôes pas seul(e) : essaie d'en parler ou de trouver un petit rituel apaisant. Respirer, √©crire ou marcher peuvent aider.")

        if compteur["culpabilit√©"] >= 3:
            resume.append("Tu as souvent ressenti de la culpabilit√©. Tu fais de ton mieux. Prends soin de ton discours int√©rieur : sois aussi doux(ce) avec toi que tu le serais avec un(e) ami(e).")

    labels = []
    scores_bonheur = []
    emojis = []

    for rep in reponses:
        date = rep['date']
        emotions = rep.get("emotions", [])
        score = 10

        if "triste" in emotions:
            score -= 2
        if rep.get("colere") == "oui":
            score -= 2
        elif rep.get("colere") == "un peu":
            score -= 1

        score -= (rep.get("stress", 5) - 5) * 0.5
        score += (rep.get("etudes", 5) - 5) * 0.5

        if "joie" in emotions:
            score += 1
        if "gratitude" in emotions:
            score += 1
        if "fiert√©" in emotions:
            score += 0.5
        if "jalousie" in emotions:
            score -= 1
        if "anxi√©t√©" in emotions:
            score -= 1
        if "culpabilit√©" in emotions:
            score -= 1

        score = max(0, min(10, score))

        if score >= 8:
            emoji = "üòÑ"
        elif score >= 6:
            emoji = "üôÇ"
        elif score >= 4:
            emoji = "üòê"
        elif score >= 2:
            emoji = "üòü"
        else:
            emoji = "üò¢"

        labels.append(date)
        scores_bonheur.append(round(score, 2))
        emojis.append(emoji)

    emoji_dates = list(zip(labels, emojis))

    return render_template(
        "bilan.html",
        pseudo=pseudo,
        resume=resume,
        labels=labels,
        scores_bonheur=scores_bonheur,
        emoji_dates=emoji_dates
    )


@app.route('/logout')
def logout():
 return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)

